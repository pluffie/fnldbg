(local fennel (require :fennel))

(λ fail [fmt ...]
  (print (.. "\x1b[1;31merror:\x1b[0m " (string.format fmt ...)))
  (os.exit 1))

;; CLI
(local help
  ["Usage: metafennel [options] <file>"
   ""
   "Metafennel is a Fennel metadata extractor. You can get some information"
   "about source code from files generated by this program."
   ""
   "Options:"
   "  --help     : Show this message"
   "  -o output  : Set output file"
   "  -o -       : Use console as output file"
   "  --pwd path : Include information about pwd in output"
   ""
   "Also note that metafennel supports all of the fennel compiler options."])

(λ print-help-and-die []
  (each [_ line (ipairs help)] (print line))
  (os.exit 0))

(var file nil)
(local options
  {:output nil
   :pwd nil
   :require-as-include false
   :correlate false
   :no-compiler-sandbox false
   :assert-as-repl false
   :metadata false
   :plugins []})

(macro cont [& body]
  `(do ,body (parse-args args)))

(λ parse-args [args]
  (case args
    ["--help"]
    (print-help-and-die)

    ["-o" output & args]
    (cont (set options.output output))

    ["--pwd" path & args]
    (cont (set options.pwd path))

    ;; Fennel flags
    ["--require-as-include" & args]
    (cont (set options.require-as-include true))

    ["--correlate" & args]
    (cont (set options.correlate true))

    ["--no-compiler-sandbox" & args]
    (cont (set options.no-compiler-sandbox true))

    ["--add-package-path"]
    (fail "metafennel does not support --add-package-path... YET")

    ["--add-fennel-path"]
    (fail "metafennel does not support --add-fennel-path... YET")

    ["--add-macro-path"]
    (fail "metafennel does not support --add-macro-path... YET")

    ["--load"] (fail "metafennel does not support --load... YET") 
    ["-l"]     (fail "metafennel does not support -l... YET") 

    ["--assert-as-repl" & args]
    (cont (set options.assert-as-repl true))

    ["--metadata" & args]
    (cont (set options.metadata true))

    ["--no-metadata" & args]
    (cont (set options.metadata false))

    ["--plugin" plugin & args]
    (cont (table.insert options.plugins plugin))

    ;; Stub flags
    ["--skip-include"] (fail "metafennel does not support --skip-include.")
    ["--use-bit-lib"]  (fail "metafennel does not support --use-bit-lib.")

    ["--repl"                   & args] (cont)
    ["--eval"                   & args] (cont)
    ["-e"                       & args] (cont)
    ["--compile"                & args] (cont)
    ["-c"                       & args] (cont)
    ["--compile-binary" _ _ _ _ & args] (cont)
    ["--add-package-cpath"      & args] (cont)
    ["--globals" _              & args] (cont)
    ["--globals-only" _         & args] (cont)
    ["--lua" _                  & args] (cont)
    ["--raw-errors"             & args] (cont)
    ["--no-searcher"            & args] (cont)
    ["--no-fennelrc"            & args] (cont)

    ;; Handle invalid options
    (where [option] (string.match option "^-.+"))
    (fail "Invalid option: %s." option)

    ;; Input files
    [path & args]
    (if (= nil file)
      (cont (set file path))
      (fail "You must specify only one input file."))))

(case arg
  (where args (= 0 (length args))) (print-help-and-die)
  args                             (parse-args args))

(when (= nil file)
  (fail "No input file specified."))

;; Read file
(local content (let [f (io.open file)
                     content (-?> f (: :read "*a"))]
                 (-?> f (: :close))
                 content))

(when (= nil content)
  (fail "Couldn't read file."))

;; Generate metadata
(local metadata {:version 1
                 :path file
                 :pwd options.pwd
                 :sourcemap []
                 :symbolmap {}
                 :metadata {}})

(λ symbol-to-expression [ast scope]
  (each [mangled original (pairs scope.unmanglings)]
    (if (= nil (. metadata.symbolmap original))
      (tset metadata.symbolmap original []))
    (tset (. metadata.symbolmap original) mangled true)))

(λ fn-hook [[_fn [name] args ?meta1 ?meta2] scope]
  (λ table? [?ast]
    (and (= :table (type ?ast))
         (not (fennel.list? ?ast))
         (not (fennel.sequence? ?ast))
         (not (fennel.sym? ?ast))
         (not (fennel.varg? ?ast))
         (not (fennel.comment? ?ast))))

  (tset metadata.metadata name {:fnl/arglist args})
  (if (table? ?meta1)
      (each [k v (pairs ?meta1)] (tset metadata.metadata name k v))
      (= :string (type ?meta1))
      (do (tset metadata.metadata name :fnl/docstring ?meta1)
          (when (table? ?meta2)
            (each [k v (pairs ?meta2)] (tset metadata.metadata name k v))))))

;; Plugins
(λ load-plugin [path]
  (case (pcall fennel.dofile path)
    (true plugin) plugin
    (false err)   (fail "Failed to load plugin: %s" err)))

(local plugins
  (collect [_ plugin (ipairs options.plugins)]
    (load-plugin plugin)))

(table.insert plugins {:versions [:1.4.2]
                       :name :metafennel
                       : symbol-to-expression
                       :fn fn-hook})

;; Call the compiler
(local (_ sourcemap)
  (fennel.compile-string content
                         {:plugins plugins
                          :filename file
                          :allowedGlobals false
                          :requireAsInclude options.require-as-include
                          :correlate options.correlate
                          :useMetadata options.metadata
                          :assertAsRepl options.assert-as-repl
                          :compilerEnv (if options.no-compiler-sandbox _G)}))

;; Add more metadata
(each [k [file line] (pairs sourcemap)]
  (when (= :number (type k))
    (tset metadata.sourcemap k {:file (-?> file (string.gsub "^%./" ""))
                                :line line})))
(set metadata.source sourcemap.key)
(set metadata.short-src sourcemap.short_src)

;; Convert set to array
(each [k set_ (pairs metadata.symbolmap)]
  (tset metadata.symbolmap k (icollect [v _ (pairs set_)] v)))

;; Write metadata
(let [out (case options.output
            nil (io.open (.. (string.match file "([^/\\]+)%..+$") ".mf") :w)
            "-" io.stdout
            out (io.open out :w))]
  (when (not= nil out)
    (out:write ";; Generated by metafennel\n")
    (out:write (fennel.view metadata {:metamethod? false}))
    (out:write "\n")
    (out:close)))
